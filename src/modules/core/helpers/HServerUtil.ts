import { APIInteractionGuildMember, ActionRowBuilder, AnyThreadChannel, ButtonBuilder, ButtonStyle, Client, EmbedBuilder, FetchedThreads, GuildMember, MessageActionRowComponentBuilder, ThreadChannel } from "discord.js";
import CLogger from "../interface/utilities/logger/controllers/CLogger.js";
import HDiscordBot from "./HDiscordBot.js";
import HDiscordConfig from "./HDiscordConfig.js";

/**
 * A class representing the server shortcuts
 * 
 * @version 1.0.0
 * @since 04/23/23
 * @author
 *  - Devitrax
 */
export default class HServerUtil {

    /**
     * Loads environment variable
     * 
     * @param {string} path - The path to the environment variable
     * @returns {string} - Returns the value of the environment variable
     * @throws {Error} - Throws an error if the environment variable does not exist
     */
    static async logVerification(client: Client, embed: EmbedBuilder): Promise<void> {
        const serverName: string = HDiscordConfig.loadEnv(`discord.server.name`)
        const forumName: string = HDiscordConfig.loadEnv(`discord.server.forum.log.channel`)
        const threadName: string = HDiscordConfig.loadEnv(`discord.server.forum.log.thread.verification`)
        const threadContent: string = HDiscordConfig.loadEnv(`discord.server.forum.log.thread.verification.content`)
        const thread = await HDiscordBot.getSpecificServerForumThreadByName(client, serverName, forumName, threadName, threadContent)

        if (!thread) {
            CLogger.error(`Thread [${threadName}] does not exist.`);
            return;
        }

        await thread.send({
            embeds: [
                embed
            ]
        })
    }

    /**
     * Creates a new support ticket thread for a member.
     * 
     * @param {Client} client - The Discord client instance. 
     * @param {GuildMember | APIInteractionGuildMember} member - The member who is creating the ticket.
     * @param {EmbedBuilder} embed - The embed to send with the ticket.
     * @returns {Promise<ThreadChannel<boolean> | null>} - The new ticket thread, or null if the channel doesn't exist.
     */
    static async createTicket(client: Client, member: GuildMember | APIInteractionGuildMember, embed: EmbedBuilder): Promise<ThreadChannel<boolean> | null> {
        const guildName: string = HDiscordConfig.loadEnv(`discord.server.name`)
        const channelName: string = HDiscordConfig.loadEnv(`discord.server.channel.ticket`)
        const ticketNo: string = await HDiscordConfig.loadDbConfig(`discord.server.channel.ticket.count`)
        const threadName: string = `ticket-${ticketNo}`
        const channel = HDiscordBot.getSpecificServerTextChannelByName(client, guildName, channelName)

        if (!channel) {
            CLogger.error(`Channel [${channelName}] does not exist.`);
            return null;
        }

        const fetchedThreads: FetchedThreads = await channel.threads.fetch();
        const threadsArray: AnyThreadChannel<boolean>[] = Array.from(fetchedThreads.threads.values());
        let thread: ThreadChannel<boolean> | null = threadsArray.find((thread) => thread.name === threadName) as ThreadChannel;
        if (!thread) {
            thread = await channel.threads.create({
                name: threadName,
                autoArchiveDuration: 60,
                reason: `Generated by ${client.user?.username}`,
            });
        }

        const menuRow: ActionRowBuilder<MessageActionRowComponentBuilder> = new ActionRowBuilder<MessageActionRowComponentBuilder>()
            .addComponents(new ButtonBuilder()
                .setLabel("Respond to Ticket")
                .setCustomId("respondTicket")
                .setStyle(ButtonStyle.Primary)
                .setEmoji("‚úâÔ∏è")
            )
            .addComponents(new ButtonBuilder()
                .setLabel("Close Ticket")
                .setCustomId("closeTicket")
                .setStyle(ButtonStyle.Danger)
                .setEmoji("üîê")
            )

        thread.send({
            content: `${HDiscordBot.tagUser(member.user.id)}, Please wait until a support handles your ticket.`,
            embeds: [embed],
            components: [menuRow]
        })

        await HDiscordConfig.loadDbConfig(`discord.server.channel.ticket.count`, `${Number(ticketNo) + 1}`)

        return thread
    }

}